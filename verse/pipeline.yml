---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Verse website pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>

meta:
  name:     (( param "Please name your pipeline" ))
  website:  (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.website ))

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  image:
    name: huntprod/verse
    tag: latest

  cf:
    api:      https://api.run.pivotal.io
    org:      (( param "Please provide the name of your CF organization" ))
    space:    (( param "Please provide the name of your CF space" ))
    username: (( param "Please provide your CF username (for deployments)" ))
    password: (( param "Please provide your CF password (for deployments)" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  shout:
    topic:    (( concat meta.name "-pipeline" ))
    url:      (( param "Please specify the Shout! endpoint" ))
    username: (( param "Please specify the Shout! operations username" ))
    password: (( param "Please specify the Shout! operations password" ))

    metadata:
      build-team-name:     $BUILD_TEAM_NAME
      build-job-name:      $BUILD_JOB_NAME
      build-pipeline-name: $BUILD_PIPELINE_NAME

    links:
      pipeline: (( concat meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME" ))
      build:    (( concat meta.shout.links.pipeline "/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME" ))

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - build
      - staging
      - prod

jobs:
  - name: build
    plan:
      - aggregate:
        - get: changes
          trigger: true
      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: changes
          outputs:
            - name: pushme
          run:
            path: ./changes/ci/scripts/build
            args: []
          params:
            CF_API_URL:  (( grab meta.cf.api ))
            CF_USERNAME: (( grab meta.cf.username ))
            CF_PASSWORD: (( grab meta.cf.password ))
            CF_ORG:      (( grab meta.cf.org ))
            CF_SPACE:    (( grab meta.cf.space ))
            REPO_ROOT:   changes
            REPO_OUT:    pushme
            BRANCH:      (( grab meta.github.website.branch ))
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: website build job '$BUILD_JOB_NAME' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: website build job '$BUILD_JOB_NAME' failed.
            ok:      no
            link:    (( grab meta.shout.links.build ))
      - put: code
        params:
          rebase: true
          repository: pushme/changes
  - name: staging
    plan:
      - aggregate:
        -  get: code
           passed: [build]
           trigger: true
      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: code
          run:
            path: ./code/ci/scripts/stage
            args: []
          params:
            CF_API_URL:  (( grab meta.cf.api ))
            CF_USERNAME: (( grab meta.cf.username ))
            CF_PASSWORD: (( grab meta.cf.password ))
            CF_ORG:      (( grab meta.cf.org ))
            CF_SPACE:    (( grab meta.cf.space ))
            MANIFEST:    manifest-stage.yml
            REPO_ROOT:   code
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: staging job '$BUILD_JOB_NAME' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: staging job '$BUILD_JOB_NAME' failed.
            ok:      no
            link:    (( grab meta.shout.links.build ))
      - put: notify
        params:
          topic:   (( grab meta.shout.topic ))
          method:  announce
          message: Changes deployed to the staging site.  Please review them and then trigger the `prod` job in the pipeline.
          link:    (( grab meta.shout.links.pipeline ))

  - name: prod
    plan:
      - aggregate:
        - { get: code, passed: [staging] }
      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: code
          run:
            path: ./code/ci/scripts/stage
            args: []
          params:
            CF_API_URL:  (( grab meta.cf.api ))
            CF_USERNAME: (( grab meta.cf.username ))
            CF_PASSWORD: (( grab meta.cf.password ))
            CF_ORG:      (( grab meta.cf.org ))
            CF_SPACE:    (( grab meta.cf.space ))
            MANIFEST:    manifest.yml
            REPO_ROOT:   code
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: deployment job '$BUILD_JOB_NAME' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: deployment job '$BUILD_JOB_NAME' failed.
            ok:      no
            link:    (( grab meta.shout.links.build ))
      - put: notify
        params:
          topic:   (( grab meta.shout.topic ))
          method:  announce
          message: Changes deployed to production!  Good job everyone!
          link:    (( grab meta.website ))

resource_types:
  - name: shout-notification
    type: docker-image
    source:
      repository: huntprod/shout-resource


resources:
  - name: changes
    type: git
    source:
      uri:         (( grab meta.github.website.uri ))
      branch:      (( grab meta.github.website.branch ))
      private_key: (( grab meta.github.website.private_key ))
      ignore_paths:
        - htdocs

  - name: code
    type: git
    source:
      uri:         (( grab meta.github.website.uri ))
      branch:      (( grab meta.github.website.branch ))
      private_key: (( grab meta.github.website.private_key ))

  - name: notify
    type: shout-notification
    source:
      topic:    (( grab meta.shout.topic ))
      url:      (( grab meta.shout.url ))
      username: (( grab meta.shout.username ))
      password: (( grab meta.shout.password ))
